<pre class='metadata'>
Title: Motion Path Module Level 1
Shortname: motion
Level: 1
Status: ED
Work Status: Refining
ED: https://drafts.fxtf.org/motion-1/
TR: https://www.w3.org/TR/motion-1/
Previous Version: https://www.w3.org/TR/2017/WD-motion-1-20170711/
Previous Version: https://www.w3.org/TR/2015/WD-motion-1-20150409/
Group: fxtf
Editor: Dirk Schulze, Adobe Inc., dschulze@adobe.com, w3cid 51803
Editor: Eric Willigers, Google, ericwilligers@google.com, w3cid 67534
Editor: Jihye Hong, LG Electronics, jh.hong@lge.com, w3cid 79168
Editor: Tab Atkins-Bittner, Google, http://xanthir.com/contact/, w3cid 42199
Former Editor: Shane Stephens, Google, shanestephens@google.com, w3cid 47691
Test Suite: https://github.com/web-platform-tests/wpt/tree/master/css/motion
Abstract: Motion path allows authors to position any graphical object and animate it along an author specified path.
</pre>

<pre class=link-defaults>
spec:css-transforms-1; type:dfn;
    text:local coordinate system
</pre>


Introduction {#intro}
=====================

<em>This section is not normative.</em>

The 'transform' property and its related properties
allow a [=box=] to be arbitrarily repositioned
(and rotated, scaled, etc)
relative to its laid out position,
without disrupting the layout of any other elements on the page.
These positions can be animated or transitioned with CSS,
but only in relatively simple ways:
moving a box in a straight line from its starting position to its ending position.

This specification introduces the 'offset' function,
which takes a number of functions introducing <em>paths</em> through space,
and a distance to travel along that path,
and transforms (and possibly rotates)
the element to match that point along the path.

This allows a number of powerful new transform possibilities,
such as positioning using polar coordinates
(with the ''ray()'' function)
rather than the standard rectangular coordinates
used by the ''translate()'' function.

It also allows an element to be animated <em>along the defined path</em>,
making it easy to define complex and beautiful 2d spatial transitions.

<div class=example>
    For example,
    the following picture shows a curving path
    (indicated with dotted lines),
    and an airplane graphic positioned
    at various points along the path.
    The plane faces in the direction of the path at each position on the path.

    <figure>
        <img src="images/motion-path.svg" width="470" height="120" alt="Example Path">
        <p class=caption>The plane is shown at different 'offset-distance' values: ''0%'', ''50%'', and ''100%''.</p>
    </figure>
</div>


Module interactions {#placement}
--------------------------------

This specification defines additional types of transforms
(see [[css-transforms-1]])
that can be applied to an element.

As described in [[css-transforms-2#ctm]],
the transforms defined by this document are layered
after the individual transform properties
('translate'/'rotate'/'scale', defined in [[css-transforms-2]])
and before the 'transform' property
(defined in [[css-transforms-1]]).


Values {#values}
----------------

This specification follows the <a href="https://www.w3.org/TR/CSS21/about.html#property-defs">CSS property definition conventions</a> from [[!CSS21]].
The <<basic-shape>> type is defined in CSS Shapes Module Level 1 [[!CSS-SHAPES]].
The <<coord-box>> tpe is defined in CSS Box Model Module Level 3 [[!CSS-BOX-3]].
Value types not defined in these specifications are defined in CSS Values and Units Module Level 3 [[!CSS3VAL]].

In addition to the property-specific values listed in their definitions, all properties defined in this specification also accept CSS-wide keywords such as <a href="https://drafts.csswg.org/css-cascade-4/#valdef-all-initial">initial</a> and <a href="https://drafts.csswg.org/css-cascade-4/#valdef-all-inherit">inherit</a> as their property value [[!CSS3VAL]]. For readability it has not been repeated explicitly.


Motion Paths {#motion-paths-overview}
=====================================

The properties in this specification allow defining an <dfn export>offset transform</dfn>
according to a distance (from 'offset-distance')
along a path (from 'offset-path')
starting at a particular point in the parent box (from 'offset-position'),
putting a particular point of the transformed element (the [=anchor point=], from 'offset-anchor')
at the defined spot
and possibly rotating the transformed element
to match the path's direction at that point (from 'offset-rotate').

<!--
        ████████     ███    ████████ ██     ██
        ██     ██   ██ ██      ██    ██     ██
        ██     ██  ██   ██     ██    ██     ██
███████ ████████  ██     ██    ██    █████████
        ██        █████████    ██    ██     ██
        ██        ██     ██    ██    ██     ██
        ██        ██     ██    ██    ██     ██
-->

Defining A Path: The 'offset-path' property {#offset-path-property}
-----------------------------------------------------------------

<pre class=propdef>
Name: offset-path
Value: none | <<ray()>> | <<url>> | [ <<basic-shape>> && <<coord-box>>? ] | <<coord-box>>
Initial: none
Applies to: <a href="https://drafts.csswg.org/css-transforms-1/#transformable-element">transformable elements</a>
Inherited: no
Percentages: n/a
Computed value: as specified
Media: visual
Animation type: by computed value
</pre>

Specifies the <dfn export>offset path</dfn>,
a geometrical path the box gets positioned on,
the <dfn export for="offset path">initial position</dfn>
(where on the [=offset path=] the element is positioned at ''offset-distance: 0%''),
and the <dfn export for="offset path">initial direction</dfn>
(the initial orientation of the box (per 'offset-rotate') at the [=initial position=]).

Values have the following meanings:

<dl dfn-for=offset-path dfn-type=value>
    : <<ray()>>
    ::
        The [=offset path=] is a line extending from the [=initial position=]
        at some angle.
        See [[#ray-function]] for details.

    : <<basic-shape>>
    ::
        The <a>offset path</a> is a basic shape as specified in CSS Shapes [[!CSS-SHAPES]].

        'offset-position' is ignored for circle and ellipse basic shapes with explicit center positions, and for other types of basic shapes. If a circle or ellipse basic shape has no explicit center position, the shape is centered at the [=initial position=] of the path, as described in 'offset-position'.

        The [=initial position=] for basic shapes are defined as follows:

        : <<path()>>
        ::
            The [=initial position=] is defined by the first “move to” argument in the path string. For the initial direction follow SVG 1.1 [[!SVG11]].
        : <<circle()>>
        : <<ellipse()>>
        ::
            The [=initial position=] is defined by the point where a horizontal tangent to the circle/ellipse would reach the top vertical position.

        : <<inset()>>
        ::
            The [=initial position=] is the left end of the top horizontal line, immediately to the right of any 'border-radius' arc.
        : <<polygon()>>
        ::
            The [=initial position=] is defined by the first coordinate pair of the polygon.

            The <var>initial direction</var> is defined by the vector connecting.

            the [=initial position=] with the next following coordinate pair that isn't equal to the [=initial position=].

        The <<coord-box>> specified in combination with a <<basic-shape>> provides the reference box for the <<basic-shape>>. If no reference box is specified, it defaults to ''&lt;coord-box>/border-box''.

        Apart from polygons with non-zero length, the <var>initial direction</var> is 90 degrees (i.e. to the right).

        Note: This gives ''0deg'' rotation when 'offset-rotate' is ''offset-rotate/auto''.

    : <<coord-box>>
    ::
        The [=offset path=] is the specified [=edge=] of the box,
        including the effect of any 'border-radius'.

        The [=initial position=] is the left end of the top horizontal line,
        immediately to the right of any 'border-radius' arc,
        and the <var>initial direction</var> is to the right.

    : <<url>>
    ::
        References an SVG <a>shape element</a> and uses its geometry as <a>offset path</a>.
        See SVG 1.1 for more information about the [=initial position=] and <var>initial direction</var> [[!SVG11]].

    : <dfn for=offset-path id=offsetpath-none>none</dfn>
    ::
        No <a>offset path</a> gets created. When 'offset-path' is <a href="#offsetpath-none">none</a>, 'offset-distance' and 'offset-rotate' have no effect.
</dl>

A computed value of other than <a href="#offsetpath-none">none</a> results in the creation of a <a>stacking context</a> [[!CSS21]] and [=containing block=], per usual for 'transform'.

A reference that fails to download, is not a reference to an SVG <a>shape element</a>, or is non-existent, is treated as equivalent to <code>path("m 0 0")</code>.

Note: This is a zero length path with <a href="https://www.w3.org/TR/SVG11/implnote.html#PathElementImplementationNotes">directionality</a> aligned with the positive x-axis.</p>

See the section <a href="#calculating-path-transform">“Calculating the path transform”</a> for how to use the <a>offset path</a> to compute the transform.


<!--
████████     ███    ██    ██   ███ ███  
██     ██   ██ ██    ██  ██   ██     ██ 
██     ██  ██   ██    ████   ██       ██
████████  ██     ██    ██    ██       ██
██   ██   █████████    ██    ██       ██
██    ██  ██     ██    ██     ██     ██ 
██     ██ ██     ██    ██      ███ ███  
-->

<h4 id=ray-function>
The ''ray()'' Function</h4>

The ''ray()'' function defines an [=offset path=]
as a straight line emerging from a point at some defined angle:

<pre class=prod>
<dfn>ray()</dfn> = ray( <<angle>> && <<ray-size>>? && contain? )

<dfn>&lt;ray-size></dfn> = closest-side | closest-corner | farthest-side | farthest-corner | sides
</pre>

Its arguments are:

<dl dfn-type=value dfn-for="ray()">
    : <dfn><<angle>></dfn>
    ::
        The <a>offset path</a> is a line segment
        that starts from the [=initial position=]
        and proceeds in the direction defined by the specified <<angle>>.
        As with [=gradient functions=],
        <<angle>> values are interpreted as bearing angles,
        with ''0deg'' pointing up
        and positive angles representing clockwise rotation.

        This is also the [=initial direction=].

    : <dfn>&lt;ray-size></dfn>
    ::
        Specifies the length of the [=offset path=]
        (the distance between the ''offset-distance: 0%''
        and ''offset-distance: 100%'' points)
        relative to the containing box.

        If no <<ray-size>> is specified it defaults to ''closest-side''.

        Note: For ''sides'',
        the distance depends on the <<angle>> specified;
        for all other values,
        the distance is constant regardless of the <<angle>>.

        Individual keywords are:

        <dl dfn-for="<ray-size>">
            : <dfn id=size-closest-side>closest-side</dfn>
            :: The distance from the [=initial position=]
                to whichever side of the [=containing block=]
                is closest.
            : <dfn id=size-closest-corner>closest-corner</dfn>
            :: The distance from the [=initial position=]
                to whichever corner of the [=containing block=]
                is closest.
            : <dfn id=size-farthest-side>farthest-side</dfn>
            :: The distance from the [=initial position=]
                to whichever side of the [=containing block=]
                is farthest.
            : <dfn id=size-farthest-corner>farthest-corner</dfn>
            :: The distance from the [=initial position=]
                to whichever corner of the [=containing block=]
                is farthest.
            : <dfn id=size-sides>sides</dfn>
            :: The distance from the [=initial position=]
                to the point where the [=offset path=]
                intersects the [=containing block's=] boundary.

                If the [=initial position=] is on the [=containing block's=] boundary,
                or outside its bounds entirely,
                the distance is zero.
        </dl>

        Note: For ''closest-side'' and ''closest-corner'',
        if the [=initial position=] is <em>on</em> an edge/corner,
        that's the closest one.
        (In other words, the distance is zero.)

        Note: For ''closest-side'' and ''farthest-side'',
        if the [=initial position=] is outside the [=containing block=] entirely,
        the edges of the [=containing block=]
        are considered to extend out to infinity.

    : <dfn>contain</dfn>
    ::
        The used value of 'offset-distance' is clamped so that the box is entirely contained within the path.

        If no 'offset-distance' would lead to the box being enclosed by the path, the path size is minimally increased so that such an 'offset-distance' exists.

        Issue: Not clear what this actually means. See <a href="https://github.com/w3c/fxtf-drafts/issues/363">Issue 363</a>.
</dl>

<div class=example>
    Here are some examples. The first example shows that some parts of boxes are outside of the <a>offset path</a>.
    <pre><code highlight=html>
    &lt;style>
        body {
            transform-style: preserve-3d;
            width: 200px;
            height: 200px;
        }
        .box {
            width: 50px;
            height: 50px;
            offset-position: 50% 50%;
            offset-distance: 100%;
            offset-rotate: 0deg;
        }
        #redBox {
            background-color: red;
            offset-path: ray(45deg closest-side);
        }
        #blueBox {
            background-color: blue;
            offset-path: ray(180deg closest-side);
        }
    &lt;/style>
    &lt;body>
        &lt;div class="box" id="redBox">&lt;/div>
        &lt;div class="box" id="blueBox">&lt;/div>
    &lt;/body>
    </code></pre>
    <figure>
        <img alt="An image of boxes positioned without contain" src="images/offset_distance_without_contain.png" style="width: 200px;"/>
        <figcaption>'offset-path' without 'contain'</figcaption>
    </figure>

    In the second example, 'contain' is given to the 'offset-path' value of each box
    to avoid overflowing.
    <pre><code highlight=html>
    &lt;style>
        body {
            transform-style: preserve-3d;
            width: 200px;
            height: 200px;
        }
        .box {
            width: 50px;
            height: 50px;
            offset-position: 50% 50%;
            offset-distance: 100%;
            offset-rotate: 0deg;
        }
        #redBox {
            background-color: red;
            offset-path: ray(45deg closest-side contain);
        }
        #blueBox {
            background-color: blue;
            offset-path: ray(180deg closest-side contain);
        }
    &lt;/style>
    &lt;body>
        &lt;div class="box" id="redBox">&lt;/div>
        &lt;div class="box" id="blueBox">&lt;/div>
    &lt;/body>
    </code></pre>
    <figure>
        <img alt="An image of boxes positioned with contain" src="images/offset_distance_with_contain.png" width=200 height=220/>
        <figcaption>'offset-path' with 'contain'</figcaption>
    </figure>

    In the third example, the path size is increased so that the box can be contained. The <a>used offset distance</a> is negative.
    <pre><code highlight=html>
    &lt;style>
        body {
            transform-style: preserve-3d;
            width: 250px;
            height: 250px;
        }
        .box {
            width: 60%;
            height: 10%;

            offset-position: 20% 20%;
            offset-distance: 0%;
            offset-rotate: 0deg;
            offset-anchor: 200% -300%;
        }
        #blueBox {
            background-color: blue;
            offset-path: ray(-90deg closest-side contain);
        }
    &lt;/style>
    &lt;body>
        &lt;div class="box" id="blueBox">&lt;/div>
    &lt;/body>
    </code></pre>
    <figure>
        <img alt="An image of an increased path size" src="images/increase-size.svg" width="400" height="335" />
        <figcaption>'offset-path' with path size increased</figcaption>
    </figure>

    In the fourth example, the initial position is outside the containing block.
    <pre><code highlight=html>
    &lt;style>
        #container {
            transform-style: preserve-3d;
            width: 200px;
            height: 200px;
        }
        .box {
            width: 20%;
            height: 20%;
            offset-position: 140% 70%;
            offset-distance: 100%;
        }
        #redBox {
            background-color: red;
            offset-path: ray(-90deg sides);
        }
        #blueBox {
            background-color: blue;
            offset-path: ray(180deg closest-side);
        }
    &lt;/style>
    &lt;div id="container">
        &lt;div class="box" id="redBox">&lt;/div>
        &lt;div class="box" id="blueBox">&lt;/div>
    &lt;/div>
    </code></pre>
    <figure>
        <img alt="An image with initial position outside the containing block" src="images/initial-outside.svg" width=700 height=460 />
        <figcaption>Initial position outside the containing block</figcaption>
    </figure>
</div>

### Examples Of <<basic-shape>> Positioning ### {#example-shape}

<div class=example>
    This example uses a circle with implicit center position.
    <pre><code highlight=html>
    &lt;style>
        body {
            width: 323px;
            height: 131px;
            margin: 0px;
            border: 2px solid black;
            padding: 8px;
            transform-style: preserve-3d;
        }
        .item {
            width:  90px;
            height: 40px;
            background-color: violet;
        }
        #middle {
            offset-position: auto;
            offset-path: circle(60%) margin-box;
            offset-distance: 25%;
            offset-anchor: left top;
        }
    &lt;/style>
    &lt;body>
        &lt;div class="item">&lt;/div>
        &lt;div class="item" id="middle">&lt;/div>
        &lt;div class="item">&lt;/div>
    &lt;/body>
    </code></pre>
    <figure>
        <img src="images/normal-flow.svg" width="505" height="324" alt="Normal flow determining circle center">
        <figcaption>The circle center is determined by normal flow.</figcaption>
    </figure>
</div>

### Examples of <<coord-box>> Positioning ### {#example-coord}

<div class=example>
    This example shows how <<coord-box>> <a>offset path</a> works in combination with 'border-radius'.

    <pre><code highlight=html>
    &lt;style>
        body {
            width: 500px;
            height: 300px;
            border-radius: 80px;
            border: dashed aqua;
            margin: 0;
        }
        #blueBox {
            width: 40px;
            height: 20px;
            background-color: blue;
            offset-path: margin-box;
        }
    &lt;/style>
    &lt;body>
        &lt;div id="blueBox">&lt;/div>
    &lt;/body>
    </code></pre>
    <figure>
        <img alt="An image of example for geometry-box with border-radius" src="images/geometry-box.svg" width=470 height=270 />
        <figcaption>The [=initial position=] is the left end of the top horizontal line.</figcaption>
    </figure>
</div>



<!--
        ████████  ████  ██████  ████████    ███    ██    ██  ██████  ████████
        ██     ██  ██  ██    ██    ██      ██ ██   ███   ██ ██    ██ ██      
        ██     ██  ██  ██          ██     ██   ██  ████  ██ ██       ██      
███████ ██     ██  ██   ██████     ██    ██     ██ ██ ██ ██ ██       ██████  
        ██     ██  ██        ██    ██    █████████ ██  ████ ██       ██      
        ██     ██  ██  ██    ██    ██    ██     ██ ██   ███ ██    ██ ██      
        ████████  ████  ██████     ██    ██     ██ ██    ██  ██████  ████████
-->

Position on the path: The 'offset-distance' property {#offset-distance-property}
--------------------------------------------------------------------------------

<pre class=propdef>
Name: offset-distance
Value: <<length-percentage>>
Initial: 0
Applies to: <a href="https://drafts.csswg.org/css-transforms-1/#transformable-element">transformable elements</a>
Inherited: no
Percentages: refer to the total path length
Computed value: a computed <<length-percentage>> value
Media: visual
Animation type: by computed value
</pre>

Specifies the position of the box as a distance along the <a>offset path</a>.

<dl dfn-for="offset-distance" dfn-type="value">
    : <<length-percentage>>
    ::
        Specifies the distance from the [=initial position=] of the <a>offset path</a> to the position of the box’s <a>anchor point</a>.

        Percentages are relative to the length of the <a>offset path</a>-- that is, the distance between the [=initial position=] and the end position of the <a>offset path</a>.
</dl>

### Calculating the computed distance along a path ### {#calculating-the-computed-distance-along-a-path}

Processing the distance along an <a>offset path</a> operates differently depending upon the nature of the <a>offset path</a>:

* References to <<angle>> <a>offset path</a>s with contain are unclosed intervals.
* References to <<angle>> <a>offset path</a>s without contain are unbounded rays.
* All basic CSS shapes are closed loops.
* <a>Offset path</a>s (including references to SVG Paths) are closed loops only if the final command in the path list is a closepath command ("z" or "Z"), otherwise they are unclosed intervals.
* References to SVG circles, ellipses, images, polygons and rects are closed loops.
* References to SVG lines and polylines are unclosed intervals.

To determine the <dfn>used offset distance</dfn> for a given <a>offset path</a> and <dfn>offset distance</dfn>:

1. Let the <dfn>total length</dfn> be the total length of <a>offset path</a> with all sub-paths.
2. Convert <a>offset distance</a> to pixels, with 100% being converted to <a>total length</a>.
3. <dl class=switch>
        : If <a>offset path</a> is an unbounded ray:
        :: Let <a>used offset distance</a> be equal to <a>offset distance</a>.
        : Otherwise if <a>offset path</a> is an <<angle>> path with contain:
        :: Let <a>used offset distance</a> be equal to <a>offset distance</a>, clamped so that the box lies entirely within the path.
        : If <a>offset path</a> is any other unclosed interval:
        :: Let <a>used offset distance</a> be equal to <a>offset distance</a> clamped by 0 and the total length of the path.
        : Otherwise <a>offset path</a> is a closed loop:
        :: Let <a>used offset distance</a> be equal to <a>offset distance</a> modulo the total length of the path. If the total length of the path is 0, <a>used offset distance</a> is also 0.

            Note: “Modulo” here uses the traditional mathematical definition,
            where the output is always non-negative.
    </dl>



<div class=example>
This example shows boxes placed along an unclosed interval.

<pre><code highlight=html>
&lt;style>
    .item {
        width: 100px;
        height: 40px;
        offset-position: 0% 0%;
        offset-path: path('m 0 0 h 200 v 150');
    }
    #box1 {
        background-color: red;
        offset-distance: -280%;
    }
    #box2 {
        background-color: green;
        offset-distance: 190%;
    }
&lt;/style>
&lt;body>
    &lt;div class="item" id="box1">&lt;/div>
    &lt;div class="item" id="box2">&lt;/div>
&lt;/body>
</code></pre>
<figure>
    <img src="images/offset-distance-unclosed.svg" width=700 height=270
         alt="An example of boxes placed along an unclosed interval"/>
    <figcaption>An example of boxes placed along an unclosed interval</figcaption>
</figure>
</div>

<div class=example>
This example shows boxes placed along a closed interval.

<pre><code highlight=html>
&lt;style>
    .item {
        width: 100px;
        height: 40px;
        offset-position: 0% 0%;
        offset-path: path('m 0 0 h 200 v 150 z');
    }
    #box1 {
        background-color: red;
        offset-distance: -280%;
    }
    #box2 {
        background-color: green;
        offset-distance: 190%;
    }
&lt;/style>
&lt;body>
    &lt;div class="item" id="box1">&lt;/div>
    &lt;div class="item" id="box2">&lt;/div>
&lt;/body>
</code></pre>
<figure>
    <img src="images/offset-distance-closed.svg" width=700 height=270
         alt="An example of boxes placed along a closed interval"/>
    <figcaption>An example of boxes placed along a closed interval</figcaption>
</figure>
</div>

<div class=example>
    This example shows a way to align boxes within the polar coordinate system using 'offset-path', 'offset-distance'.

    <pre><code highlight=html>
    &lt;style>
        body {
            transform-style: preserve-3d;
            width: 300px;
            height: 300px;
            border: dashed gray;
            border-radius: 50%;
        }
        .circleBox {
            position: absolute;
            left: 50%;
            top: 50%;
            width: 40px;
            height: 40px;
            background-color: red;
            border-radius: 50%;
        }
        #circle1 {
            offset-path: ray(0deg farthest-side);
            offset-distance: 50%;
        }
        #circle2 {
            offset-path: ray(90deg farthest-side);
            offset-distance: 20%;
        }
        #circle3 {
            offset-path: ray(225deg farthest-side);
            offset-distance: 100%;
        }
    &lt;/style>
    &lt;body>
        &lt;div class="circleBox" id="circle1">&lt;/div>
        &lt;div class="circleBox" id="circle2">&lt;/div>
        &lt;div class="circleBox" id="circle3">&lt;/div>
    &lt;/body>
    </code></pre>
    <figure>
        <img alt="An image of three boxes positioned to polar coordinates" src="images/simple_offset_position.png" style="width: 300px;"/>
        <figcaption>An example of positioning box in polar coordinates</figcaption>
    </figure>
</div>


<!--
        ████████   ███████   ██████  ████ ████████ ████  ███████  ██    ██
        ██     ██ ██     ██ ██    ██  ██     ██     ██  ██     ██ ███   ██
        ██     ██ ██     ██ ██        ██     ██     ██  ██     ██ ████  ██
███████ ████████  ██     ██  ██████   ██     ██     ██  ██     ██ ██ ██ ██
        ██        ██     ██       ██  ██     ██     ██  ██     ██ ██  ████
        ██        ██     ██ ██    ██  ██     ██     ██  ██     ██ ██   ███
        ██         ███████   ██████  ████    ██    ████  ███████  ██    ██
-->

Define the starting point of the path: The 'offset-position' property {#offset-position-property}
-------------------------------------------------------------------------------------------------

<pre class=propdef>
Name: offset-position
Value: auto | <<position>>
Initial: auto
Media: visual
Inherited: no
Applies to: [=transformable elements=]
Percentages: Refer to the size of containing block
Computed value: The ''offset-position/auto'' keyword or a computed <<position>>
Animation type: by computed value
</pre>

Specifies the [=initial position=] of the [=offset path=],
for [=offset paths=] that don't predefine their [=initial position=].
(Currently, ''ray()'' is the only [=offset path=]
that doesn't predefine its [=initial position=]).

Issue: Currently, ''circle()'' and ''ellipse()'' [=offset paths=]
use this position as their center,
if the center position is omitted from their arguments.
This is not an initial position, obviously.
Whether this is desired is being discussed in
<a href="https://github.com/w3c/fxtf-drafts/issues/504">Issue 504</a>.

Values are defined as follows:

<dl dfn-for="offset-position" dfn-type="value">
    : <dfn>auto</dfn>
    ::
        The [=initial position=] is the top-left corner of the box.

    : <dfn><<position>></dfn>
    ::
        The [=initial position=] is the result of using the <<position>>
        to position a 0x0 object area
        within the box's [=containing block=].
</dl>

<div class=example>
    This example shows positioning a box with 'offset-position'.

    <pre><code highlight=html>
    &lt;style>
        #wrap {
            position: relative;
            width: 300px;
            height: 300px;
            border: 1px solid black;
        }

        #box {
            width: 100px;
            height: 100px;
            background-color: green;
            position: absolute;
            top: 100px;
            left: 80px;
            offset-position: auto;
            offset-anchor: center;
            offset-path: ray(45deg);
        }
    &lt;/style>
    &lt;body>
        &lt;div id="wrap">
            &lt;div id="box">&lt;/div>
        &lt;/div>
    &lt;/body>
    </code></pre>
    <figure>
        <img alt="An image of offset-position: auto" src="images/offset_position_auto.png" width="300"/>
        <figcaption>An example when ''offset-position/auto'' is given to 'offset-position'</figcaption>
    </figure>
</div>

<div class=example>
This example shows the interaction with the 'transform' property, and with an individual transform property ('rotate'). The motion path transform is a vertical translation moving ('left', 'top') to 'offset-position'.

<pre><code highlight=html>
&lt;style>
    #wrap {
        transform-style: preserve-3d;
        width: 400px;
        height: 350px;
    }
    .item {
        position: absolute;
        left: 200px;
        top: 0px;
        offset-position: 200px 100px; /* translates by 0px,100px */
        offset-anchor: left top;
        transform-origin: left top;
        width: 130px;
        height: 80px;
        border-top-right-radius: 23px;
    }
    #box1 {
        background-color: tomato;
        offset-position: auto;
    }
    #box2 {
        background-color: green;
    }
    #box3 {
        background-color: navy;
        rotate: 90deg; /* applied before motion path transform */
    }
    #box4 {
        background-color: gold;
        transform: rotate(90deg); /* applied after motion path transform */
    }
&lt;/style>
&lt;body>
    &lt;div id="wrap">
        &lt;div class="item" id="box1">&lt;/div>
        &lt;div class="item" id="box2">&lt;/div>
        &lt;div class="item" id="box3">&lt;/div>
        &lt;div class="item" id="box4">&lt;/div>
    &lt;/div>
&lt;/body>
</code></pre>
<figure>
    <img alt="An example when motion path and other transforms interact" src="images/position-transform.svg" width="400" height="350"/>
    <figcaption>An example when motion path and other transforms interact</figcaption>
</figure>
</div>

<div class=example>
This example uses 'position' ''static'', so 'offset-position' generates translations from the normal flow positions. By amplifying these translations using 'scale', the normal flow is rotated 180 degrees around the 'offset-position', and the boxes are exploded away from each other.

<pre><code highlight=html>
&lt;style>
    #wrap {
        transform-style: preserve-3d;
        width: 500px;
        height: 250px;
        line-height: 0px;
    }
    span {
        position: static;
        display: inline-block;
        width: 100px;
        height: 50px;
        border-top-right-radius: 23px;
        scale: 2.5 2.5; /* applied before motion path transform */
        offset-position: center;
        transform: scale(0.4); /* applied after motion path transform */
    }
    #box1 {
        background-color: tomato;
    }
    #box2 {
        background-color: green;
    }
    #box3 {
        background-color: navy;
    }
    #box4 {
        background-color: gold;
    }
&lt;/style>
&lt;body>
    &lt;div id="wrap">
        &lt;div>
            &lt;span id="box1">&lt;/span>&lt;span id="box2">&lt;/span>
        &lt;/div>
        &lt;div>
            &lt;span id="box3">&lt;/span>&lt;span id="box4">&lt;/span>
        &lt;/div>
    &lt;/div>
&lt;/body>
</code></pre>
<figure>
    <img alt="An example when motion path and scale interact" src="images/position-scale.svg" width="604" height="304"/>
    <figcaption>An example when motion path and scale interact</figcaption>
</figure>
</div>

<div class=example>
In this example, each 'offset-position' value is ignored as 'offset-path' is a <<geometry-box>>, but the other offset properties combine to have an effect equivalent to that for 'offset-position' 'right bottom'.

<pre><code highlight=html>
&lt;style>
    #wrap {
        transform-style: preserve-3d;
        width: 540px;
        height: 420px;
    }
    .item {
        position: absolute;
        width: 90px;
        height: 70px;
        border-top-right-radius: 23px;
        scale: 0.8 0.8; /* applied before motion path transform */
        offset-path: padding-box;
        offset-distance: 50%;
        offset-rotate: 0deg;
        offset-anchor: right bottom;
        transform: scale(1.25); /* applied after motion path transform */
    }
    #box1 {
        background-color: tomato;
        position: static;
        offset-position: auto; /* ignored */
    }
    #box2 {
        background-color: green;
        right: 0px;
        top: 0px;
        offset-position: 23% 45%; /* ignored */
    }
    #box3 {
        background-color: navy;
        left: 0px;
        bottom: 0px;
        offset-position: 34% 56px; /* ignored */
    }
    #box4 {
        background-color: gold;
        right: 0px;
        bottom: 0px;
        offset-position: 45px 67px; /* ignored */
    }
&lt;/style>
&lt;body>
    &lt;div id="wrap">
        &lt;div class="item" id="box1">&lt;/div>
        &lt;div class="item" id="box2">&lt;/div>
        &lt;div class="item" id="box3">&lt;/div>
        &lt;div class="item" id="box4">&lt;/div>
    &lt;/div>
&lt;/body>
</code></pre>
<figure>
    <img alt="An example when offset-position is ignored" src="images/position-absolute.svg" width="550" height="430"/>
    <figcaption>An example when offset-position is ignored</figcaption>
</figure>
</div>


<!--
           ███    ██    ██  ██████  ██     ██  ███████  ████████ 
          ██ ██   ███   ██ ██    ██ ██     ██ ██     ██ ██     ██
         ██   ██  ████  ██ ██       ██     ██ ██     ██ ██     ██
███████ ██     ██ ██ ██ ██ ██       █████████ ██     ██ ████████ 
        █████████ ██  ████ ██       ██     ██ ██     ██ ██   ██  
        ██     ██ ██   ███ ██    ██ ██     ██ ██     ██ ██    ██ 
        ██     ██ ██    ██  ██████  ██     ██  ███████  ██     ██
-->

Define an anchor point: The 'offset-anchor' property {#offset-anchor-property}
------------------------------------------------------------------------------

<pre class=propdef>
Name: offset-anchor
Applies to: [=transformable elements=]
Value: auto | <<position>>
Initial: auto
Media: visual
Inherited: no
Percentages: relative to the width and the height of the element's [=reference box=]
Computed value: the ''offset-anchor/auto'' keyword or a computed <<position>>
Animation type: by computed value
</pre>

Defines the box's <dfn export>anchor point</dfn>--
the point that is positioned along the [=offset path=].

Values have the following meanings:
<dl dfn-for="offset-anchor" dfn-type="value">
    : <dfn>auto</dfn>
    :: The [=anchor point=] is the same as
        the point indicated by 'transform-origin'.

        Specifically, the [=computed value=] of 'transform-origin'
        is resolved as a <<position>>
        against the element's [=reference box=].

    : <dfn><<position>></dfn>
    ::
        The [=anchor point=] is the result of resolving the <<position>>
        against the element's [=reference box=].
</dl>

Issue: Which box this is resolved against is being discussed in
<a href="https://github.com/w3c/fxtf-drafts/issues/503">Issue 503</a>.

<div class=example>
The following explains how to set the <a>anchor point</a> of the box.

<pre><code highlight=html>
#plane {
    offset-anchor: center;
}
</code></pre>

The red dot in the middle of the shape indicates the <a>anchor point</a> of the shape.
<figure>
    <img src="images/plane.svg" width="160" height="140" alt="Shape with its anchor point">
    <figcaption>A red dot in the middle of a plane shape indicates the shape's <a>anchor point</a>.</figcaption>
</figure>
</div>

<div class=example>
This example shows an alignment of four boxes with different <a>anchor point</a>s.

<pre><code highlight=html>
&lt;style>
    body {
        transform-style: preserve-3d;
        width: 300px;
        height: 300px;
        border: 2px solid gray;
        border-radius: 50%;
    }
    .box {
        width: 50px;
        height: 50px;
        background-color: orange;
        offset-position: 50% 50%;
        offset-distance: 100%;
        offset-rotate: 0deg;
    }
    #item1 {
        offset-path: ray(45deg closest-side);
        offset-anchor: right top;
    }
    #item2 {
        offset-path: ray(135deg closest-side);
        offset-anchor: right bottom;
    }
    #item3 {
        offset-path: ray(225deg closest-side);
        offset-anchor: left bottom;
    }
    #item4 {
        offset-path: ray(315deg closest-side);
        offset-anchor: left top;
    }
&lt;/style>
&lt;body>
    &lt;div class="box" id="item1">&lt;/div>
    &lt;div class="box" id="item2">&lt;/div>
    &lt;div class="box" id="item3">&lt;/div>
    &lt;div class="box" id="item4">&lt;/div>
&lt;/body>
</code></pre>
<figure>
    <img src="images/offset_anchor.png" alt="An example of offset-anchor" style="width: 300px;">
    <figcaption>An example of 'offset-anchor'</figcaption>
</figure>
</div>

<div class=example>
This example shows boxes centered at their offset-position.

<pre><code highlight=html>
&lt;style>
    body {
        width: 500px;
        height: 500px;
    }
    .box {
        background-color: mediumpurple;
        offset-path: none;
        offset-anchor: center;
    }
    #item1 {
        offset-position: 90% 20%;
        width: 60%;
        height: 20%;
    }
    #item2 {
        offset-position: 100% 100%;
        width: 30%;
        height: 10%;
    }
    #item3 {
        offset-position: 50% 100%;
        width: 20%;
        height: 60%;
    }
    #item4 {
        offset-position: 0% 100%;
        width: 30%;
        height: 90%;
    }
&lt;/style>
&lt;body>
    &lt;div class="box" id="item1">&lt;/div>
    &lt;div class="box" id="item2">&lt;/div>
    &lt;div class="box" id="item3">&lt;/div>
    &lt;div class="box" id="item4">&lt;/div>
&lt;/body>
</code></pre>
<figure>
    <img src="images/offset_anchor_center.svg" width=700 height=790 alt="An example of offset-anchor: center">
    <figcaption>An example of 'offset-anchor: center'</figcaption>
</figure>
</div>

<div class=example>
This example shows how offset-anchor computes to their offset-position.

<pre><code highlight=html>
&lt;style>
    body {
        width: 500px;
        height: 500px;
    }
    .box {
        background-color: mediumpurple;
        offset-path: none;
        offset-anchor: auto;
    }
    #item1 {
        offset-position: 90% 20%;
        width: 60%;
        height: 20%;
    }
    #item2 {
        offset-position: 100% 100%;
        width: 30%;
        height: 10%;
    }
    #item3 {
        offset-position: 50% 100%;
        width: 20%;
        height: 60%;
    }
    #item4 {
        offset-position: 0% 100%;
        width: 30%;
        height: 90%;
    }
&lt;/style>
&lt;body>
    &lt;div class="box" id="item1">&lt;/div>
    &lt;div class="box" id="item2">&lt;/div>
    &lt;div class="box" id="item3">&lt;/div>
    &lt;div class="box" id="item4">&lt;/div>
&lt;/body>
</code></pre>
<figure>
    <img src="images/offset_anchor_auto.svg" width=700 height=570 alt="An example of offset-anchor: auto">
    <figcaption>An example of 'offset-anchor: auto'</figcaption>
</figure>
</div>


<!--
        ████████   ███████  ████████    ███    ████████ ████████
        ██     ██ ██     ██    ██      ██ ██      ██    ██      
        ██     ██ ██     ██    ██     ██   ██     ██    ██      
███████ ████████  ██     ██    ██    ██     ██    ██    ██████  
        ██   ██   ██     ██    ██    █████████    ██    ██      
        ██    ██  ██     ██    ██    ██     ██    ██    ██      
        ██     ██  ███████     ██    ██     ██    ██    ████████
-->

Rotation at point: The 'offset-rotate' property {#offset-rotate-property}
-------------------------------------------------------------------------

<pre class=propdef>
Name: offset-rotate
Value: [ auto | reverse ] || <<angle>>
Initial: auto
Applies to: <a href="https://drafts.csswg.org/css-transforms-1/#transformable-element">transformable elements</a>
Inherited: no
Percentages: n/a
Computed value: computed <<angle>> value, optionally preceded by auto
Media: visual
Animation type: by computed value
</pre>

Defines the orientation of the box while positioning along the <a>offset path</a>.

Values have the following meanings:

<dl dfn-for="offset-rotate" dfn-type="value">
    : <dfn>auto</dfn>
    ::
        Indicates that the object is rotated (over time if 'offset-distance' is animated) by the angle of the direction (i.e., directional tangent vector) of the <a>offset path</a>, relative to the positive x-axis. If specified in combination with <<angle>>, the computed value of <<angle>> is added to the computed value of ''offset-rotate/auto''.

        Note: For ray paths, the rotation implied by ''offset-rotate/auto'' is 90 degrees less than the ray's bearing <<angle>>.

    : <dfn>reverse</dfn>
    ::
        Indicates that the object is rotated (over time if 'offset-distance' is animated) by the angle of the direction (i.e., directional tangent vector) of the <a>offset path</a>, relative to the positive x-axis, plus 180 degrees. If specified in combination with <<angle>>, the computed value of <<angle>> is added to the computed value of ''offset-rotate/reverse''.

        Note: This is the same as specifying ''auto 180deg''.
    : <dfn><<angle>></dfn>
    ::
        Indicates that the box has a constant clockwise rotation transformation applied to it by the specified rotation angle. See definitions of ''offset-rotate/auto'' or ''offset-rotate/reverse'' if specified in combination with either one of the keywords.
</dl>

When the <a>offset path</a> is a zero length path, the value of 'offset-rotate' is 0 degree, the direction of the positive x-axis.

If the <a>offset path</a> is composed of multiple line segments, the orientation at the connection between the segments is the direction of the "later" segment.
(This matches SVG's notion of <l spec=svg2>[=direction of a path=]</l>.)

Note: The rotation described here does not override or replace any rotation defined by the 'transform' property.

<div class=example>
The following examples use the shape of a plane. The red dot in the middle of the shape indicates the <a>anchor point</a> of the shape. When no offset properties are set, the shape is not translated or rotated along the path.

<figure>
    <img src="images/offset-initial.svg" width="470" height="120" alt="Path without offset">
    <figcaption>A black plane at the beginning of the path, with no offset properties set.</figcaption>
</figure>

When the shape's <a>anchor point</a> is placed at different positions along the path and 'offset-rotate' is ''0deg'', the shape is not rotated.

<figure>
    <img src="images/offset-rotate-none.svg" width="470" height="120" alt="Path without rotation">
    <figcaption>A black plane at different positions on a blue dotted path without
    rotation transforms.</figcaption>
</figure>

If the 'offset-rotate' property is set to ''offset-rotate/auto'', and the shape's <a>anchor point</a> is placed at different positions along the path, the shape is rotated based on the gradient at the current position and faces the direction of the path at this position.

<figure>
    <img src="images/offset-rotate-auto.svg" width="470" height="120" alt="Path with auto rotation">
    <figcaption>A black plane at different positions on a blue dotted path,
    rotated in the direction of the path.</figcaption>
</figure>

In this example, the 'offset-rotate' property is set to ''reverse''. The plane faces the opposite direction of the path at each position on the path.

<figure>
    <img src="images/offset-rotate-reverse.svg" width="470" height="120" alt="Path with reverse auto rotation">
    <figcaption>A black plane at different positions on a blue dotted path,
    rotated in the opposite direction of the path.</figcaption>
</figure>

The last example sets the 'offset-rotate' property to ''-45deg''. The shape is rotated anticlockwise by 45 degree once and keeps the rotation at each position on the path.

<figure>
    <img src="images/offset-rotate-45.svg" width="470" height="120" alt="Path with fixed rotation">
    <figcaption>A black plane at different positions on a blue dotted path,
    rotated by a fixed amount of degree.</figcaption>
</figure>
</div>

<div class=example>
This example shows how ''offset-rotate/auto'' or ''offset-rotate/reverse'' work when specified in combination
with <<angle>>.
The computed value of <<angle>> is added to the computed value of ''offset-rotate/auto'' or ''offset-rotate/reverse''.

<pre><code highlight=html>
&lt;style>
    body {
        width: 300px;
        height: 300px;
        margin: 0px;
        border: solid gray;
        border-radius: 50%;
    }
    .circle {
        offset-position: 150px 150px;
        offset-distance: 86%;
        width: 42px;
        height: 42px;
        background-color: mediumpurple;
        border-radius: 50%;
        display: flex;
        align-items: center;
        justify-content: center;
    }
    #item1 {
        offset-path: ray(0deg closest-side);
        offset-rotate: auto 90deg;
    }
    #item2 {
        offset-path: ray(45deg closest-side);
        offset-rotate: auto 90deg;
    }
    #item3 {
        offset-path: ray(135deg closest-side);
        offset-rotate: auto -90deg;
    }
    #item4 {
        offset-path: ray(180deg closest-side);
        offset-rotate: auto -90deg;
    }
    #item5 {
        offset-path: ray(225deg closest-side);
        offset-rotate: reverse 90deg;
    }
    #item6 {
        offset-path: ray(-45deg closest-side);
        offset-rotate: reverse -90deg;
    }
&lt;/style>
&lt;body>
    &lt;div class="circle" id="item1">1&lt;/div>
    &lt;div class="circle" id="item2">2&lt;/div>
    &lt;div class="circle" id="item3">3&lt;/div>
    &lt;div class="circle" id="item4">4&lt;/div>
    &lt;div class="circle" id="item5">5&lt;/div>
    &lt;div class="circle" id="item6">6&lt;/div>
&lt;/body>
</code></pre>
<figure>
    <img alt="An image of example for offset-rotate" src="images/rotate_by_angle_with_auto.png" style="width: 250px; text-align: center"/>
    <figcaption>The boxes are rotated by the value of ''offset-rotate/auto'' with a fixed amount of degree.</figcaption>
</figure>
</div>


### Calculating the path transform ### {#calculating-path-transform}

<div class=switch>
    1. Create a supplemental transformation matrix <dfn>T1</dfn> for the local coordinate system of the box.
    2. Find the [=initial position=] of the <a>offset path</a> specified by 'offset-position' as <dfn>T2</dfn>.
    3. Let <dfn>P</dfn> be the point at the <a>used offset distance</a> along the <a>offset path</a>.
    4. Find the translation of the box such that its <a>anchor point</a> is placed at <a>P</a>, and apply that to <a>T2</a>.
    5. Post-multiply <a>T2</a> by the rotation specified by 'offset-rotate'.
    6. Post-multiply <a>T2</a> to <a>T1</a>.
    7. Post-multiply <a>T1</a> to the local coordinate system of the box.
</div>

Issue: Do we need to say how to get the position in more detail?

Issue: There needs to be a process for converting ''rotate()'' to an angle.


<!--
 ███████  ████████ ████████  ██████  ████████ ████████
██     ██ ██       ██       ██    ██ ██          ██   
██     ██ ██       ██       ██       ██          ██   
██     ██ ██████   ██████    ██████  ██████      ██   
██     ██ ██       ██             ██ ██          ██   
██     ██ ██       ██       ██    ██ ██          ██   
 ███████  ██       ██        ██████  ████████    ██   
-->

Offset shorthand: The 'offset' property {#offset-shorthand}
-----------------------------------------------------------

<pre class="propdef shorthand">
Name: offset
Value: [ <<'offset-position'>>? [ <<'offset-path'>> [ <<'offset-distance'>> || <<'offset-rotate'>> ]? ]? ]! <nobr>[ / <<'offset-anchor'>> ]?</nobr>
Applies to: <a href="https://drafts.csswg.org/css-transforms-1/#transformable-element">transformable elements</a>
</pre>

This is a shorthand property for setting 'offset-position', 'offset-path', 'offset-distance', 'offset-rotate' and 'offset-anchor'. Omitted values are set to their initial values.


Privacy Considerations {#privacy}
=================================

This specification introduces no new privacy considerations.

Security Considerations {#security}
===================================

This specification introduces no new security considerations.

<h2 class=no-num id=changes>Changes</h2>

<em>This section is non-normative.</em>

The following changes were made since the <a href="https://www.w3.org/TR/2015/WD-motion-1-20150409/">9 April 2015 First Public Working Draft</a>.

* Renamed <a href="https://www.w3.org/TR/2015/WD-motion-1-20150409/#motion-path-property">motion-path</a> to 'offset-path' for integrating with <a href="https://www.w3.org/TR/2016/WD-css-round-display-1-20160301/#polar-angle-property">polar-angle</a>.
    * Added the ''ray()'' to define an <a>offset path</a> as a line segment which direction is specified by <<angle>>.
    * Added <<size>> and 'contain' value for the ''ray()''.
* Renamed <a href="https://www.w3.org/TR/2015/WD-motion-1-20150409/#propdef-motion-offset">motion-offset</a> to 'offset-distance' for integrating with <a href="https://www.w3.org/TR/2016/WD-css-round-display-1-20160301/#polar-distance-property">polar-distance</a>.
* Renamed <a href="https://www.w3.org/TR/2015/WD-motion-1-20150409/#propdef-motion-rotation">motion-rotation</a> to 'offset-rotate'.
* Added 'offset-position' to specify the [=initial position=] of the path by merging <a href="https://www.w3.org/TR/2016/WD-css-round-display-1-20160301/#polar-origin-property">polar-origin</a> from [[CSS-ROUND-DISPLAY-1]].
* Added 'offset-anchor' to specify the origin point of the element by merging <a href="https://www.w3.org/TR/2016/WD-css-round-display-1-20160301/#polar-anchor-property">polar-anchor</a> from [[CSS-ROUND-DISPLAY-1]].
* Renamed the shorthand property <a href="https://www.w3.org/TR/2015/WD-motion-1-20150409/#propdef-motion">motion</a> to 'offset'.
* Made 'offset-rotate' specify the rotation transformation by ''offset-rotate/auto'' or ''offset-rotate/reverse'' in combination with <<angle>>.

<h2 class=no-num id=acknowledgments>Acknowledgments</h2>

Thanks to
fantasai,
Hyojin Song,
and
all the rest of the CSS WG members
for their reviews, comments, and corrections.
